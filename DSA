
//CUMULATIVE MULTIPLE OF AN ARRAY WITH EXCEPTION HANDLING


public class CM{
    public static int calculateCM(int[] arr) throws ArithmeticException {
        if (arr.length == 0) {

            throw new ArithmeticException("Array is empty.");
        }

        int cMul = 1;

        for (int num : arr) {
            if (num == 0) {
                throw new ArithmeticException("Array contains zero.");
            }

            cMul*= num;
        }

        return cMul;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};

        try {
            int result = calculateCM(arr);
            System.out.println("Cumulative multiple: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Exception occurred: " + e.getMessage());
        }
    }
}

//FIND THE MISSING NUMBERS IN AN ARRAy

import java.util.ArrayList;
import java.util.List;

public class MissingNumbers {
    public static List<Integer> findMissingNumbers(int[] arr) {
        List<Integer> missingNumbers = new ArrayList<>();

        // CREATE BOOLEAN ARRAY
        boolean[] present = new boolean[arr.length + 1];

        // PRESENCE OF NUMBERS IS MARKED
        for (int num : arr) {
            present[num] = true;
        }

        
        for (int i = 1; i < present.length; i++) {
            if (!present[i]) {
                missingNumbers.add(i);
            }
        }

        return missingNumbers;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 6, 8};
        List<Integer> missingNumbers = findMissingNumbers(arr);
        System.out.println("Missing numbers: " + missingNumbers);
    }
}


//COUNT OF SINGULARS IN AN ARRAY


import java.util.HashMap;
import java.util.Map;

public class CountSingulars {
    public static int countSingulars(int[] arr) {
        Map<Integer, Integer> countMap = new HashMap<>();

        
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        int singularsCount = 0;

        
        for (int num : arr) {
            if (countMap.get(num) == 1) {
                singularsCount++;
            }
        }

        return singularsCount;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 2, 3, 5, 6, 1, 4, 7};
        int singularsCount = countSingulars(arr);
        System.out.println("Count of singulars: " + singularsCount);
    }
}


//JAVA SUBARRAY
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int[] array1= new int[n];
    for(int i=0;i<n;i++){
        array1[i]=sc.nextInt();
    }
    int count=0;
    for(int j=0;j<n;j++){
        int sum=0;
        for(int k=j;k<n;k++){
            sum=array1[k]+sum;
            if(sum<0){
                count++;
            }
        }
    }
    System.out.println(count);
    }
}

//7.LONGEST PALINDROMIC SUBSTRING

public class LongestPalindrome {
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return s;
        }
        
        int start = 0;
        int end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandFromCenter(s, i, i);
            int len2 = expandFromCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        
        return s.substring(start, end + 1);
    }
    
    private static int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        
        return right - left - 1;
    }
    
    public static void main(String[] args) {
        String input = "babad";
        String longestPalindrome = longestPalindrome(input);
        System.out.println(longestPalindrome);  // Output: "bab"
    }
}

//8. JAVA STACK

import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();

        // Pushing elements onto the stack
        stack.push(5);
        stack.push(10);
        stack.push(15);
        stack.push(20);

        // Popping 
        int poppedElement = stack.pop();
        System.out.println("Popped element: " + poppedElement);

        // Peeking the top element of the stack
        int topElement = stack.peek();
        System.out.println("Top element: " + topElement);

        // Checking if the stack is empty
        boolean isEmpty = stack.isEmpty();
        System.out.println("Is stack empty? " + isEmpty);

        // Getting the size of the stack
        int size = stack.size();
        System.out.println("Size of the stack: " + size);
    }
}

//9.JAVA DEQUEUE
public class test {
    public static void main(String[] args) {
        HashMap<Integer, Integer> map = new HashMap<>();
        Deque<Integer> deque          = new ArrayDeque<>();
        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();        
        int max = map.size();
        
        for (int i = 0; i < n; i++) {
            /* Remove old value (if necessary) */
            if (i >= m) {
                int old = deque.remove();
                if (map.get(old) == 1) {
                    map.remove(old);
                } else {
                    map.put(old, map.get(old) - 1);
                }
            }
            /* Add new value */
            int num = scan.nextInt();
            deque.add(num);
            map.merge(num, 1, Integer::sum);
            
            max = Math.max(max, map.size());
						
            /* If all integers are unique, break out of loop */
            if (max == m) {
                break;
            }
        }
        
        scan.close();
        System.out.println(max);
    }
}

//6.REMOVE DUPLICATES FROM LINKED LIST

import java.util.HashSet;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        next = null;
    }
}

class LinkedList {
    Node head;

    void removeDuplicates() {
        if (head == null) {
            return;
        }

        Node current = head;
        Node previous = null;
        HashSet<Integer> set = new HashSet<>();

        while (current != null) {
            int currentData = current.data;

            if (set.contains(currentData)) {
                previous.next = current.next;
            } else {
                set.add(currentData);
                previous = current;
            }

            current = current.next;
        }
    }

    void printList() {
        Node current = head;

        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }

        System.out.println();
    }

    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        linkedList.head = new Node(10);
        linkedList.head.next = new Node(20);
        linkedList.head.next.next = new Node(10);
        linkedList.head.next.next.next = new Node(30);
        linkedList.head.next.next.next.next = new Node(20);

        System.out.println("Original Linked List:");
        linkedList.printList();

        linkedList.removeDuplicates();

        System.out.println("Linked List after removing duplicates:");
        linkedList.printList();
    }
}

//5.MERGE AND SORT THE ELEMENTS IN TWO LINKED LIST
import java.util.*;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    LinkedList() {
        this.head = null;
    }

    void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    void mergeSort() {
        head = mergeSort(head);
    }

    private Node mergeSort(Node node) {
        if (node == null || node.next == null) {
            return node;
        }

        Node middle = getMiddle(node);
        Node nextOfMiddle = middle.next;
        middle.next = null;

        Node left = mergeSort(node);
        Node right = mergeSort(nextOfMiddle);

        return merge(left, right);
    }

    private Node merge(Node left, Node right) {
        Node result = null;

        if (left == null) {
            return right;
        }
        if (right == null) {
            return left;
        }

        if (left.data <= right.data) {
            result = left;
            result.next = merge(left.next, right);
        } else {
            result = right;
            result.next = merge(left, right.next);
        }

        return result;
    }

    private Node getMiddle(Node node) {
        if (node == null) {
            return node;
        }

        Node slow = node;
        Node fast = node.next;

        while (fast != null) {
            fast = fast.next;
            if (fast != null) {
                slow = slow.next;
                fast = fast.next;
            }
        }

        return slow;
    }

    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        linkedList.insert(5);
        linkedList.insert(2);
        linkedList.insert(8);
        linkedList.insert(1);
        linkedList.insert(7);
        linkedList.insert(3);

        System.out.println("Before sorting:");
        linkedList.display();

        linkedList.mergeSort();

        System.out.println("After sorting:");
        linkedList.display();
    }
}

//10.JAVA PRIORITY QUEUE

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Student{
   private int token;
   private String fname;
   private double cgpa;
   public Student(int id, String fname, double cgpa) {
super();
      this.token = id;
      this.fname = fname;
      this.cgpa = cgpa;
   }
   public int getToken() {
      return token;
   }
   public String getFname() {
      return fname;
   }
   public double getCgpa() {
      return cgpa;
   }
}

public class Solution {

  public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int totalEvents = Integer.parseInt(in.nextLine());
        PriorityQueue<Student> list =
                new PriorityQueue<>(new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                if(o1.getCgpa() != o2.getCgpa())
                    return o1.getCgpa() < o2.getCgpa() ? 1 : -1;
                else{
                    if(!o1.getFname().equals(o2.getFname()))
                        return o1.getFname().compareTo(o2.getFname());
                    else
                        return o1.getToken() < o2.getToken() ? 1 : -1;
                }
            }
        });

        while(totalEvents>0){
            String event = in.next();

            if(event.equals("ENTER")){
                String name = in.next();
                double gpa = in.nextDouble();
                int id = in.nextInt();
                list.add(new Student(id, name, gpa));
            }else if(list.size() > 0 && event.equals("SERVED")){
                list.remove();
            }

            totalEvents--;
        }

        if(list.size() == 0) {
            System.out.println("EMPTY");
            return;
        }

        while(list.size() > 0){
            System.out.println(list.poll().getFname());
        }
    }
}


















